package pubSubBuilderFinal.gui.pub;

import java.awt.GridBagConstraints;
import java.util.ArrayList;

import javax.swing.JOptionPane;

import pubSubBuilderFinal.data.Data;
import pubSubBuilderFinal.gui.Result;
import pubSubBuilderFinal.gui.WelcomePage;
import pubSubBuilderFinal.publisher.types.HeartbeatPublisher;
import pubSubBuilderFinal.publisher.types.HumidityPublisher;
import pubSubBuilderFinal.publisher.types.PowerPublisher;
import pubSubBuilderFinal.publisher.types.Publisher;
import pubSubBuilderFinal.publisher.types.TemperaturePublisher;
import pubSubBuilderFinal.publisher.types.TimePublisher;
import pubSubBuilderFinal.publisher.types.WindPublisher;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Yash Divecha
 */
public class Device1PubConfig extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonBack;
	private javax.swing.JButton jButtonConfigure;
	private javax.swing.JLabel jLabel1;
	// End of variables declaration//GEN-END:variables

	private Data myData = null;
	private Result result;
	private ArrayList<javax.swing.JCheckBox> topicPubCheckBox; // GUI dynamic
																// checkboxes
	private ArrayList<String> topicsPubSelected;
	private ArrayList<Publisher> publisherSelected;

	/**
	 * Creates new form Device1Config
	 */
	java.util.List<javax.swing.JCheckBox> checks = new java.util.ArrayList<>();

	public Device1PubConfig(Data myDataIn, Result resultIn) {
		this.result = resultIn;
		this.myData = myDataIn;
		initComponents();
		setLayout(new java.awt.GridBagLayout());
		createCheckbox();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jButtonBack = new javax.swing.JButton();
		jButtonConfigure = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		jLabel1.setText("What Topics you want to Publish?");

		jButtonBack.setText("Back");
		jButtonBack.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonBackActionPerformed(evt);
			}
		});

		jButtonConfigure.setText("Configure");
		jButtonConfigure.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonConfigureActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addGap(56, 56, 56).addComponent(jLabel1))
								.addGroup(layout.createSequentialGroup().addGap(92, 92, 92)
										.addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGap(47, 47, 47).addComponent(jButtonConfigure).addGap(13, 13, 13)))
						.addGap(420, 420, 420)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(74, 74, 74).addComponent(jLabel1).addGap(349, 349, 349)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jButtonConfigure))
				.addGap(37, 37, 37)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		this.setVisible(false);
		new WelcomePage(myData,result).setVisible(true);
	}// GEN-LAST:event_jButton1ActionPerformed

	private void jButtonConfigureActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed

		// Create a collecion (Device1) - Created at database level manually

		topicsPubSelected = new ArrayList<>();
		publisherSelected = new ArrayList<>();

		// Create a new Collection
		// mongo.createCollection("Device1"); - already exists problem

		// This is used to get selected checkbox and add to the database and
		// create new publuishers as per checkbox topic
		int index = 0;
		for (int i = 0; i < topicPubCheckBox.size(); i++) {
			if (topicPubCheckBox.get(i).isSelected()) {
				topicsPubSelected.add(topicPubCheckBox.get(i).getText());
				Publisher pub;

				if (topicsPubSelected.get(index).contains("/Time")) {
					pub = new TimePublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Humidity")) {
					pub = new HumidityPublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Wind")) {
					pub = new WindPublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Temperature")) {
					pub = new TemperaturePublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Heartbeat")) {
					pub = new HeartbeatPublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Power")) {
					pub = new PowerPublisher(topicsPubSelected.get(index));
					pub.setName("Device 1");
					publisherSelected.add(pub);
				}
				System.out.println(publisherSelected.get(index).getName());
				index++;
			}
		}
		result.setDevice1PublishersSelected(publisherSelected);
		result.setDevice1SelectedTopics(topicsPubSelected);
		result.setDevice1PubConfigured(true);

		// Tasks
		// Add selected items (topicName: /Time/EST) - Done
		// Create Publishers according to the topics selected - Done
		// Alert box information :Configured successfully - Done
		// Disable other checkboxes, get publish button - Done

		JOptionPane.showMessageDialog(null, "Device 1 Publisher Successfully Configured: ", "MESSAGE",
				JOptionPane.INFORMATION_MESSAGE);
	}

	private void createCheckbox() {

		topicPubCheckBox = new ArrayList<>();

		ArrayList<String> device1Topics = myData.getDevice1Data();

		GridBagConstraints gc = new GridBagConstraints();
		gc.weightx = 10;
		gc.weighty = 0.5;

		gc.anchor = GridBagConstraints.LINE_START;
		gc.gridx = 1;
		gc.gridy = 0;
		getContentPane().add(jLabel1, gc);
		int i = 0;
		for (i = 0; i < device1Topics.size(); i++) {
			javax.swing.JCheckBox pubBox = new javax.swing.JCheckBox(device1Topics.get(i));
			topicPubCheckBox.add(i, pubBox);

			gc.anchor = GridBagConstraints.LINE_START;
			gc.gridx = 1;
			gc.gridy = i + 1;
			getContentPane().add(pubBox, gc);

		}

		gc.weighty = 10;

		gc.gridx = 1;
		gc.gridy = i + 1;
		getContentPane().add(jButtonBack, gc);

		gc.gridx = 2;
		gc.gridy = i + 1;
		getContentPane().add(jButtonConfigure, gc);
		// pack();
	}
}
