package pubSubBuilderFinal.gui.pub;

import java.awt.GridBagConstraints;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import pubSubBuilderFinal.data.Data;
import pubSubBuilderFinal.gui.Result;
import pubSubBuilderFinal.gui.WelcomePage;
import pubSubBuilderFinal.publisher.types.HeartbeatPublisher;
import pubSubBuilderFinal.publisher.types.HumidityPublisher;
import pubSubBuilderFinal.publisher.types.PowerPublisher;
import pubSubBuilderFinal.publisher.types.Publisher;
import pubSubBuilderFinal.publisher.types.TemperaturePublisher;
import pubSubBuilderFinal.publisher.types.TimePublisher;
import pubSubBuilderFinal.publisher.types.WindPublisher;

/**
 *
 * @author Yash Divecha
 */
public class Device3PubConfig extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	private javax.swing.JButton back; // Back
	private javax.swing.JButton configure; // Configure
	private javax.swing.JLabel jLabel1;

	private Data myData = null;
	private Result result;
	private ArrayList<javax.swing.JCheckBox> topicCheckBox; // GUI dynamic
															// check boxes
	private ArrayList<String> topicsPubSelected;
	private ArrayList<Publisher> publisherSelected;

	/**
	 * Creates new form Device3Config
	 */
	public Device3PubConfig(Data myDataIn, Result resultIn) {
		this.myData = myDataIn;
		this.result = resultIn;
		initComponents();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new java.awt.GridBagLayout());
		createCheckbox();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		back = new javax.swing.JButton();
		configure = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		jLabel1.setText("What Topics you want to Publish?");

		back.setText("Back");
		back.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				backActionPerformed(evt);
			}
		});

		configure.setText("Configure");
		configure.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				configureActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addGap(76, 76, 76).addComponent(jLabel1))
								.addGroup(layout.createSequentialGroup().addGap(49, 49, 49)
										.addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(55, 55, 55).addComponent(configure)))
						.addContainerGap(299, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(70, 70, 70).addComponent(jLabel1).addGap(254, 254, 254)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(configure))
						.addGap(69, 69, 69)));

		pack();
	}

	private void backActionPerformed(java.awt.event.ActionEvent evt) {
		this.setVisible(false);
		new WelcomePage(myData, result).setVisible(true);
	}

	private void configureActionPerformed(java.awt.event.ActionEvent evt) {
		topicsPubSelected = new ArrayList<>();
		publisherSelected = new ArrayList<>();

		// This is used to get selected check box and add to the database and
		// create new publishers as per check box topic
		int index = 0;
		for (int i = 0; i < topicCheckBox.size(); i++) {
			if (topicCheckBox.get(i).isSelected()) {
				topicsPubSelected.add(topicCheckBox.get(i).getText());

				Publisher pub;

				if (topicsPubSelected.get(index).contains("/Time")) {
					pub = new TimePublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Humidity")) {
					pub = new HumidityPublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Wind")) {
					pub = new WindPublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Temperature")) {
					pub = new TemperaturePublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Heartbeat")) {
					pub = new HeartbeatPublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				if (topicsPubSelected.get(index).contains("/Power")) {
					pub = new PowerPublisher(topicsPubSelected.get(index));
					pub.setName("Device 3");
					publisherSelected.add(pub);
				}
				System.out.println(publisherSelected.get(index).getName());
				index++;
			}
		}
		result.setDevice3PublishersSelected(publisherSelected);
		result.setDevice3SelectedTopics(topicsPubSelected);
		result.setDevice3PubConfigured(true);
		JOptionPane.showMessageDialog(null, "Device 3 Publisher Successfully Configured: ", "MESSAGE",
				JOptionPane.INFORMATION_MESSAGE);
	}

	private void createCheckbox() {

		topicCheckBox = new ArrayList<>();

		ArrayList<String> device3Topics = myData.getDevice3Data();

		GridBagConstraints gc = new GridBagConstraints();
		gc.weightx = 10;
		gc.weighty = 0.5;

		gc.anchor = GridBagConstraints.LINE_START;
		gc.gridx = 1;
		gc.gridy = 0;
		getContentPane().add(jLabel1, gc);
		int i = 0;
		for (i = 0; i < device3Topics.size(); i++) {
			javax.swing.JCheckBox box = new javax.swing.JCheckBox(device3Topics.get(i));
			topicCheckBox.add(i, box);

			gc.anchor = GridBagConstraints.LINE_START;
			gc.gridx = 1;
			gc.gridy = i + 1;
			getContentPane().add(box, gc);

		}

		gc.weighty = 10;
		gc.gridx = 1;
		gc.gridy = i + 1;
		getContentPane().add(back, gc);

		// gc.weighty = 10;
		gc.gridx = 2;
		gc.gridy = i + 1;
		getContentPane().add(configure, gc);
		// pack();
	}

}
